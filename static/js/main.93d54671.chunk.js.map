{"version":3,"sources":["components/Character.js","actions/requestAPI.js","App.js","serviceWorker.js","reducers/index.js","store/store.js","index.js"],"names":["Character","_ref","detail","react_default","a","createElement","className","map","character","key","id","height","alt","name","src","thumbnail","path","extension","type","data-toggle","data-target","replace","aria-expanded","aria-controls","description","target","href","urls","url","REQUEST_API_BEGIN","REQUEST_API_SUCCESS","REQUEST_API_FAILURE","requestAPIBegin","requestAPISuccess","items","payload","requestAPIFailure","error","App","this","props","requestAPI","console","log","api","width","components_Character","Component","connect","requestApiReducer","dispatch","fetch","then","res","json","data","results","catch","Boolean","window","location","hostname","match","initialState","reducers","combineReducers","state","arguments","length","undefined","action","Object","objectSpread","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93d54671.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../App.css'\r\n\r\nconst Character = ({detail}) => {\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            {\r\n                detail.map(character => {\r\n                    return (\r\n                        <ul key={character.id} className=\"col-sm-12 col-md-6 col-lg-3 box-character\">\r\n                            <div className=\"card\">\r\n                                <img className=\"card-img-top\" height=\"300px\" alt={character.name} src={character.thumbnail.path + \".\" + character.thumbnail.extension} />\r\n                                <div className=\"card-body\">\r\n                                    <h5 className=\"card-title\">{character.name}</h5>\r\n                                    <button className=\"btn btn-link-red\" type=\"button\" data-toggle=\"collapse\" data-target={\"#\" + character.name.replace(/\\W/g, '').replace(/[0-9]/g, '')} aria-expanded=\"false\" aria-controls={character.name.replace(/\\W/g, '').replace(/[0-9]/g, '')}>\r\n                                        Descrição do personagem\r\n                                        </button>\r\n                                    <div className=\"collapse\" id={character.name.replace(/\\W/g, '').replace(/[0-9]/g, '')}>\r\n                                        <p className=\"card-text\">{character.description ? character.description : 'Um personagem da Marvel'}</p>\r\n                                    </div>\r\n                                    <a target=\"window.open()\" className=\"btn btn-red\" href={character.urls[0].url}>See all about this character</a>\r\n                                </div>\r\n                            </div>\r\n                        </ul>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Character\r\n","export const REQUEST_API_BEGIN = 'REQUEST_API_BEGIN'\r\nexport const REQUEST_API_SUCCESS = 'REQUEST_API_SUCCESS'\r\nexport const REQUEST_API_FAILURE = 'REQUEST_API_FAILURE'\r\n\r\nexport const requestAPIBegin = () => ({\r\n    type: REQUEST_API_BEGIN\r\n})\r\n\r\nexport const requestAPISuccess = items => ({\r\n    type: REQUEST_API_SUCCESS,\r\n    payload: {\r\n        items\r\n    }\r\n})\r\n\r\nexport const requestAPIFailure = error => ({\r\n    type: REQUEST_API_FAILURE,\r\n    payload: {\r\n        error\r\n    }\r\n})\r\n\r\nexport function requestAPI() {\r\n    return dispatch => {\r\n        dispatch(requestAPIBegin())\r\n        return fetch('https://gateway.marvel.com:443/v1/public/characters?apikey=46ddcc696410797f092cd0b95e6dfc7c')\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                dispatch(requestAPISuccess(json.data.results))\r\n                return json.data.results\r\n            })\r\n            .catch(error => dispatch(requestAPIFailure(error)))\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Character from './components/Character';\nimport { connect } from 'react-redux'\nimport { requestAPI } from './actions'\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.requestAPI()\n  }\n\n  render() {\n    console.log(this.props.api)\n    const { api } = this.props\n    return (\n      <div className=\"App\">\n        <img className=\"logo\" width=\"280px\" src=\"https://cdn-store.iseeme.com/skin/frontend/polar/default/images/marvel/category-pages/Marvel-logo.png\" alt=\"Marvel\" />\n        <div className=\"container\">\n          <Character\n            detail={api}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ requestApiReducer }) {\n  return {\n    api: requestApiReducer.items\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    requestAPI: () => dispatch(requestAPI())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux'\r\n\r\nimport {\r\n  REQUEST_API_BEGIN,\r\n  REQUEST_API_SUCCESS,\r\n  REQUEST_API_FAILURE\r\n}\r\n  from '../actions'\r\n// import { requestApiReducer } from '../reducers'\r\n\r\nconst initialState = {\r\n  items: [],\r\n  error: null\r\n};\r\n\r\nfunction requestApiReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n\r\n    case REQUEST_API_BEGIN:\r\n      return {\r\n        ...state,\r\n        error: null\r\n      }\r\n\r\n    case REQUEST_API_SUCCESS:\r\n      return {\r\n        ...state,\r\n        items: action.payload.items\r\n      }\r\n\r\n    case REQUEST_API_FAILURE:\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        items: []\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const reducers = combineReducers({\r\n  requestApiReducer\r\n});","import { reducers } from '../reducers'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    applyMiddleware(thunk)\r\n)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { store } from './store/store'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}